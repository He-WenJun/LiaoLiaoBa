
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
		map $http_upgrade $connection_upgrade {
			default upgrade;
			'' close;
		}

    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  liaoliaoba.com;
		
		# 限制上传速度最大256k
		upload_limit_rate 256k;
		
		# 限制上传文件最大2MB
        upload_max_file_size 2m;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location /resources/ {
            #root   static/tieba_static;
			root static/muban;
            index  html/login/index.html;
        }
		
		location /file/ {
			root temp/upload;
		}

		
		
		location /api/ {
			proxy_pass http://localhost:8080;
			 #   指定允许跨域的方法，*代表所有
			add_header Access-Control-Allow-Methods *;

			#   预检命令的缓存，如果不缓存每次会发送两次请求
			add_header Access-Control-Max-Age 3600;
			#   带cookie请求需要加上这个字段，并设置为true
			add_header Access-Control-Allow-Credentials true;

			#   表示允许这个域跨域调用（客户端发送请求的域名和端口） 
			#   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
			add_header Access-Control-Allow-Origin $http_origin;

			#   表示请求头的字段 动态获取
			add_header Access-Control-Allow-Headers 
			$http_access_control_request_headers;
			
			

			#   OPTIONS预检命令，预检命令通过时才发送请求
			#   检查请求的类型是不是预检命令
			if ($request_method = OPTIONS){
				return 200;
			}
		}
		
		
		
		location /privateMessage/{
			proxy_pass http://localhost:8213;
			proxy_read_timeout 3600s;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
		}
		
		
		location /api/post/uploadImg {
			  # 转到后台处理URL 
			  upload_pass @java;
					  
			  # 指定上传文件存放目录，1表示按1位散列，将上传文件随机存到指定目录下的0、1、2、...、8、9目录中（这些目录要手动建立）
			  upload_store temp/upload/file/img 1;
				  
			  # 上传文件的权限，rw表示读写 r只读 
			  upload_store_access user:rw;
			 
			  
			 # 这里写入http报头，pass到后台页面后能获取这里set的报头字段 
			  upload_set_form_field "${upload_field_name}_name" $upload_file_name; 
			  upload_set_form_field "${upload_field_name}_content_type" $upload_content_type; 
			  upload_set_form_field "${upload_field_name}_path" $upload_tmp_path;  

			  # Upload模块自动生成的一些信息，如文件大小与文件md5值 
			  upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5; 
			  upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;
			  
			   # 允许的字段，允许全部可以 "^.*$" 
			   #  upload_pass_form_field "^submit$|^description$";
			  
			   # 每秒字节速度控制，0表示不受控制，默认0 
				  upload_limit_rate 0;
			  
			   # 如果pass页面是以下状态码，就删除此次上传的临时文件 
				  upload_cleanup 400 404 499 500-505;
				  client_max_body_size  4096m;   #文件最大上传大小
				  
		}
				
		
		location ~ (.*)/x-progress-id:(\w*) {  
            rewrite ^(.*)/x-progress-id:(\w*)   $1?X-Progress-ID=$2;  
        }

		
		location @java {
		  proxy_pass http://localhost:8080;
		 #return 200;  # 如果不需要后端程序处理，直接返回200即可
		}
		
		
			
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
		
		
		

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
	
	

}
